# server {
#     listen 0.0.0.0:8143 ssl;
#     listen 0.0.0.0:8181;

#     server_name 127.0.0.1 localhost example.com www.example.com;
#     root /app/my_app/public;
#     # index index.php;

#     # ssl_certificate      /nginx-persistence/certs/server.crt;
#     # ssl_certificate_key  /nginx-persistence/certs/server.key;
#     ssl_certificate /opt/bitnami/nginx/conf/bitnami/certs/server.crt;
#     ssl_certificate_key /opt/bitnami/nginx/conf/bitnami/certs/server.key;
#     ssl_session_cache    shared:SSL:1m;
#     ssl_session_timeout  5m;
#     ssl_ciphers  HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers  on;
#     location / {
#         try_files $uri $uri/ /index.php?q=$uri&$args;
#     }
#     location ~ \.php$ {
#         # fastcgi_pass [PHP_FPM_LINK_NAME]:9000;
#         fastcgi_pass app:9000;
#         fastcgi_index index.php;
#         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#         include fastcgi.conf;
#         fastcgi_param HTTPS on;
#         include fastcgi_params;
#     }
# }
# server {
#     listen 0.0.0.0:8143 ssl;
#     listen 0.0.0.0:8181;
#     server_name localhost;
#     root /app/my_app/public;
#     location / {
#         try_files $uri /index.php$is_args$args;
#     }
#     ssl_certificate /opt/bitnami/nginx/conf/bitnami/certs/server.crt;
#     ssl_certificate_key /opt/bitnami/nginx/conf/bitnami/certs/server.key;
#     ssl_session_cache    shared:SSL:1m;
#     ssl_session_timeout  5m;
#     ssl_ciphers  HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers  on;
#     location ~ ^/index\.php(/|$) {
#         if ($request_method = 'OPTIONS') {
#             add_header 'Access-Control-Allow-Origin' '*' always;
#             add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, OPTIONS' always;
#             add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
#             add_header 'Access-Control-Max-Age' 1728000 always;
#             add_header 'Content-Type' 'text/plain; charset=utf-8' always;
#             add_header 'Content-Length' 0 always;
#             return 204;
#         }
#         add_header 'Access-Control-Allow-Origin' '*' always;
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, OPTIONS' always;
#         add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
#         add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
#         fastcgi_pass app:9000;
#         fastcgi_split_path_info ^(.+\.php)(/.*)$;
#         include fastcgi_params;
#         fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
#         fastcgi_param DOCUMENT_ROOT $realpath_root;
#         internal;
#     }
#     location ~ \.php$ {
#         return 404;
#     }
#     access_log /opt/bitnami/nginx/logs/localhost_access.log;
#     # error_log /opt/bitnami/nginx/logs/localhost_error.log;
#     error_log /dev/stdout info;
# }
server {
    listen 0.0.0.0:8143 ssl;
    listen 0.0.0.0:8181;

    server_name localhost;
    root /app/my_app/public;

    ssl_certificate /opt/bitnami/nginx/conf/bitnami/certs/server.crt;
    ssl_certificate_key /opt/bitnami/nginx/conf/bitnami/certs/server.key;

    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout 5m;

    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;


    location / {
        # try to serve file directly, fallback to app.php
        try_files $uri /index.php$is_args$args;
    }

    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy index_dev.php or config.php
    location ~ ^/(index_dev|config)\.php(/|$) {
        fastcgi_pass app:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        # Caveat: When PHP-FPM is hosted on a different machine from nginx
        #         $realpath_root may not resolve as you expect! In this case try using
        #         $document_root instead.
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }

    # PROD
    location ~ ^/index\.php(/|$) {
        fastcgi_pass app:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/app.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    access_log /opt/bitnami/nginx/logs/localhost_access.log;
    # error_log /opt/bitnami/nginx/logs/localhost_error.log;
    error_log /dev/stdout info;
}
